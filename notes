1. create new repository 
* src
** app
*** client
*** server
*** shared
**** models (all models)
**** providers (all data providers)
**** aggregators (all aggregators - used in providers)

** lib
*** client
*** shared
*** server


const actorResourceDataProvider = new Provider({actorDataSource})
const movieResourceDataProvider = new Provider({movieDataSource})

const movieAggregator = new MovieAggregator({ actorResourceDataProvider, movieResourceDataProvider })


// exposed in api
const aggregatedProvider = new Provider({movieAggregator})


const api = new Api<ApiDefinition>({aggregatedProvider})

app.use(api)


const client = new Client<ApiDefinition>()


























const logPrinter = new NativeLogPrinter(options)

class NativeLogPrinter {
  constuctor(options) {
    const config = new Config(options)
    const ui = new NativeUI({config})
    const itemQueue = new ItemQueue({config})
    const itemManager = new ItemManager({config})
    const service = new LogService({
      config,
      ui,
      itemQueue,
      itemManager,
    })

    const supervisor = new Supervisor({config, service})
  }    
}

const nativeLogPrinter = new NativeLogPrinter()
const dataFeeder = new DataFeeder()

dataFeeder.on('data',(items) => {
  nativeLogPrinter.push(items)
})



class Supervisor {
  constuctor(options) {
    const worker = new Worker({
      task: service.write,
    })
  }
}